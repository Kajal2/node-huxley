#!/usr/bin/env node

'use strict';

var colors = require('colors');
var app = require('commander');

var huxley = require('../');
var version = require('../package.json').version;

app
  .version(version)
  .usage('[options] <file ...>')
  .option('-r, --record', 'Record a new test')
  .option('-u, --update', 'Update screenshots using the automated steps')
  .option(
    '-b, --browser <browser>',
    'Default: Firefox. Chrome needs extra setup (See README).'
  )
  .option(
    '-s, --server <uri>',
    'Default: http://localhost:4444/wd/hub. Address of the Selenium server to use'
  )
  .on('--help', function() {
    console.log(
      '  Defaults to search every Huxleyfile in current & nested folders.'.bold
    );
    console.log(
      '  Optionally pass list of relative folders to search. Accept glob ' +
      'patterns.'.bold
    );
    console.log('\n  Example:\n');
    console.log('    hux --update ./test ./tests-with-nested-folders/**');
    console.log('    hux --record examples/**\n');
  })
  .parse(process.argv);

var browser = app.browser;
var server = app.server;
// every unamed param is treated as a path to search
var allFolders = app.args;

// third-party's (e.g. grunt-huxley) entrance point is this callback. Replace
// this by something else to receive all huxley error messages
var callback = huxley.defaultDoneCallback;

if (app.update) {
  huxley.playbackTasksAndSaveScreenshots(browser, server, allFolders, callback);
} else if (app.record) {
  huxley.recordTasks(browser, server, allFolders, callback);
} else {
  huxley.playbackTasksAndCompareScreenshots(browser, server, allFolders, callback);
}
